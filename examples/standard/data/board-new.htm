<div u-control='newelementdlg'u-is='createElementDlg'class='card active'><div class='block header'style='height:2em'><h3>Add a new Element</h3><div class='closedlg'u-action='close'>&#x00D7;</div></div><div class='block'style='font-size:1.4'><div class='form-group'><label>Type:</label> <select class='typeSelect'><option disabled='disabled'selected='selected'value='0'>Select Element...</option></select></div><div class='form-group'><label>ID:</label> <input placeholder='choose a name...'aria-label='theID'class='newID'></div></div><div class='block footer'><button u-action='next'style='float:right'>Next</button></div></div><div u-control='configelementdlg'u-is='configElementDlg'class='card'><div class='block header'style='height:2em'><h3>Config ${id}</h3><div class='closedlg'u-action='close'>&#x00D7;</div></div><div class='block'style='font-size:1.4'></div><div class='block footer'><button u-action='save'style='float:right'>Save</button></div></div><div u-control='actiondlg'u-is='actionDlg'class='card'ev='${ev}'val='${val}'><div class='block header'style='height:2em'><h3>Config ${ev}</h3><div class='closedlg'u-action='close'>&#x00D7;</div></div><div class='block'><p>${ev} --- ${val}</p></div><div class='block'><div class='form-group'><label>Target:</label> <select id='adTarget'><option disabled='disabled'selected='selected'>Select target...</option></select></div><div class='form-group'><label>Event:</label> <select id='adEvent'disabled='disabled'></select></div><div class='form-group'><label>Value:</label> <input id='adValue'value='$v'></div></div><div class='block footer'><button u-action='save'style='float:right'>Save</button></div></div><script>// uElements.xxx from main page loading...

  micro.define("createElementDlg", {
    objType: null,
    objID: null,

    connectedCallback: function () {
      this.objType = this.querySelector('.typeSelect');
      this.objID = this.querySelector('.newID');

      // populate the dropdown, unavailable elements disabled.
      var sel = this.objType;
      Object.keys(uElements.defs).forEach(function (e) {
        var o = createHTMLElement(sel, 'option', { value: e });
        o.textContent = e;
        o.disabled = !uElements.impl.includes(e);
      });
    }, // connectedCallback()

    on_click: function (/** @type PointerEvent */ evt) {
      var /** @type HTMLElement */ src = evt.srcElement;
      var ua = src.getAttribute('u-action');

      if (ua === 'next') {
        if (this.objType.value === "0") {
          alert('Please select an element type');
        } else if (this.objID.value === "") {
          alert('Please specify a name');
        } else {
          ModalDialogClass.next('configelementdlg', {
            id: '/' + this.objType.value + '/' + this.objID.value
          });
        }
      }
    } // on_click()
  }); // CreateElementDlgBehavior

  
  micro.define("configElementDlg", {
    config: {},
    params: {},
    /** @type HTMLElement */
    _blk: null,
    _id: '',

    connectedCallback: function () {
      this._blk = this.querySelector('.block:not(.header)');
      this._type = this.params.id.split('/')[1];
      this._id = this.params.id.split('/')[2];

      // create properties, events and actions inputs
      var d = uElements.defs[this._type];
      uElements.defs["element"].properties.forEach(p => this._add(p, false, false));
      d.properties.forEach(p => this._add(p, false, false));
      d.events.forEach(p => this._add(p, true, false));
      d.actions.forEach(p => this._add(p, false, true));
    }, // connectedCallback()


    _add: function (k, isEvent, isAction) {
      var g, l, o;

      g = createHTMLElement(this._blk, 'div', { class: 'form-group' });
      createHTMLElement(g, 'label').textContent = k + ':';

      l = createHTMLElement(g, 'label');
      createHTMLElement(l, 'img', { src: (isEvent ? '/i/start.svg' : '/i/no.svg') });

      o = createHTMLElement(g, 'input', { name: k });
      if (this.params[k.toLowerCase()] !== undefined)
        o.value = this.params[k.toLowerCase()];

      l = createHTMLElement(g, 'label');
      o = createHTMLElement(l, 'img', { src: (isAction ? '/i/start.svg' : '/i/no.svg') });
      if (isAction) {
        o.setAttribute('u-action', 'action');
        o.setAttribute('ev', k);
      }
    }, // add()

    save: function (data) {
      var fld = this.querySelector('input[name="' + data.ev + '"]');
      if (fld) {
        if (fld.value) fld.value += ',';
        fld.value += data.val;
      }
    },

    on_click: function (evt) {
      var ua = evt.target.getAttribute('u-action');

      if (ua === 'save') {
        // var b: HTMLElement;
        var c = {};
        var l = this._blk.querySelectorAll('input[name]');

        l.forEach(function (e) {
          c[e.name] = e.value;
        });
        changeConfig(this._type + '/' + this._id, c);
        ModalDialogClass.close();

      } else if (ua == 'action') {
        var a = evt.srcElement.getAttribute('ev');
        ModalDialogClass.open('actiondlg', { ev: a });
      }
    }
  }); // ConfigElementDlgBehavior


  micro.define("actionDlg", {
    config: {},
    /** @type HTMLElement */
    _adTar: null,
    /** @type HTMLElement */
    _adEvent: null,
    /** @type HTMLElement */
    _adValue: null,
    _id: '', // selected target
    _list: [],
    params,

    connectedCallback: function () {
      this._adTar = this.querySelector('select#adTarget');
      this._adEvent = this.querySelector('select#adEvent');
      this._adValue = this.querySelector('input#adValue');

      this._list = [];
      for (t in uElements.config) {
        for (i in uElements.config[t]) {
          this._list.push(t + '/' + i);
        }
      }

      this._list.forEach(e => {
        var o = createHTMLElement(this._adTar, 'option', { value: e });
        o.textContent = e;
      });
      this._adTar.addEventListener('change', this._addEvents.bind(this));
    }, // connectedCallback()


    _addEvents: function (ev) {
      console.log(this, ev, this._adTar.value);
      var selObj = this._adEvent;

      // debugger;
      var el = this._adTar.value.split('/');
      var def = uElements.defs[el[0]].events;
      console.log(def);

      selObj.options.length = 0;
      if (def) {
        selObj.disabled = "";
        var o = createHTMLElement(selObj, 'option', { disabled: "disabled", selected: "selected" });
        o.textContent = "Select event...";
        def.forEach(a => {
          createHTMLElement(selObj, 'option', { value: a }).textContent = a;
        });
      }
    },


    on_click: function (evt) {
      var ua = evt.srcElement.getAttribute('u-action');
      if (ua === 'save') {
        debugger;

        // simulate ???
        this.params.val = // 'switch/s?value=$v';
          this._adTar.value + '?' +
          this._adEvent.value + '=' +
          this._adValue.value;

        ModalDialogClass.save(this.params);
        ModalDialogClass.close();
      }
    }
  }); // actionDlgBehavior</script>
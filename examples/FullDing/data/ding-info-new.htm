<!-- Dialogs for configuration -->
<div u-control="newelementdlg" u-is="createElementDlg" class="card">
  <div class="block header">
    <h2>Add a new Element</h2>
    <div class="closedlg" u-action="close">&#x00D7;</div>
  </div>
  <div class="block" style="font-size: 1.4">
    <div class="form-group">
      <label>Type:</label>
      <select class="typeSelect">
        <option disabled selected="selected">Please select...</option>
      </select>
    </div>
    <div class="form-group">
      <label>ID:</label>
      <input placeholder="choose a name..." aria-label="theID" class="newID">
    </div>
  </div>

  <hr />
  <div class="block">
    <button u-action="next" style="float:right">Next</button>
  </div>
</div>


<div u-control="configelementdlg" u-is="configElementDlg" class="card">
  <div class="block header">
    <h2>Config ${id}</h2>
    <div class="closedlg" u-action="close">&#x00D7;</div>
  </div>
  <div class="block" style="font-size: 1.4">
  </div>

  <hr />
  <div class="block">
    <button u-action="save" style="float:right">Save</button>
  </div>
</div>


<script>
  micro.define("createElementDlg", {
    objType: null,
    objID: null,

    connectedCallback: function () {
      var scope = this;

      this.objType = scope.querySelector('.typeSelect');
      this.objID = scope.querySelector('.newID');

      // get implemented elements and populate the dropdown
      fetch('/$elements')
        .then(function (result) {
          return (result.json())

        }).then(function (elList) {
          // fill options
          var sel = scope.objType;
          sel.innerHTML = '';
          elList.forEach(function (e) {
            var opt = document.createElement('option');
            opt.value = e;
            opt.textContent = e;
            sel.appendChild(opt);
          })
        });
    }, // connectedCallback()

    onclick: function (evt /*:PointerEvent*/) {
      var src /*:HTMLElement */ = evt.srcElement;
      var ua = src.getAttribute('u-action');

      if (ua === 'close') {
        micro.closeModal();

      } else if (ua === 'next') {
        if (this.objID.value === "") {
          alert('Please specify a name');
        } else {
          micro.openModal('configelementdlg', {
            id: '/' + this.objType.value + '/' + this.objID.value
          });
        }
      }
    } // onclick()

  }); // CreateElementDlgBehavior

  micro.define("configElementDlg", {
    config: {},
    /** @type HTMLElement */
    _blk: null,
    _id: '',

    _add: function (k) {
      var g = this._blk.appendChild(document.createElement('div'));
      g.className = 'form-group';
      g.appendChild(document.createElement('label')).textContent = k + ':';
      var i = g.appendChild(document.createElement('input'));
      i.name = k;
      if (this.params[k.toLowerCase()] !== undefined)
        i.value = this.params[k.toLowerCase()];
    }, // add()

    connectedCallback: function () {
      var scope = this;
      this._blk = this.querySelector('.block:not(.header)');
      this._type = this.params.id.split('/')[1];
      this._id = this.params.id.split('/')[2];

      // get implemented elements and populate the dropdown
      fetch('/elements.json')
        .then(function (result) {
          return (result.json())

        }).then(function (elList) {
          var d = elList[scope._type];
          if (d) {
            for (n in d.properties) scope._add(d.properties[n]);
            for (n in d.events) scope._add(d.events[n]);
            for (n in d.actions) scope._add(d.actions[n]);
          }
        });
    }, // connectedCallback()

    onclick: function (evt) {
      var ua = evt.srcElement.getAttribute('u-action');

      if (ua === 'close') {
        micro.closeModal();

      } else if (ua === 'save') {
        // var b: HTMLElement;
        var c = {};
        var l = this._blk.querySelectorAll('input[name]');

        l.forEach(function (e) {
          c[e.name] = e.value;
        });
        changeConfig(this._id, c);
        micro.closeModal();
      }
    }
  }); // ConfigElementDlgBehavior

</script>
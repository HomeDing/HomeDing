<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Elements</title>
  <link Content-Type="text/css" href="/iotstyle.css" rel="stylesheet" />

  <style>
    .Element {
      font-size: 0.8em;
    }

    .card img.active {
      background-color: limegreen;
    }

    .Element .KV {
      display: block;
      clear: both;
      height: 1.5em;
    }

    .Element .Key,
    .Element .Value {
      display: inline-block;
      height: 1.4em;
      white-space: nowrap;
      overflow: hidden;
    }

    .Element .Key {
      width: 5.2rem;
      margin-right: 0.1rem;
      text-align: right;
    }

    .u-bar {
      position: relative;
      height: 1.4em;
      width: 100%;
      background-color: #aaaaaa;
    }

    .u-bar>.pulse,
    .u-bar>.current {
      display: inline-block;
      position: absolute;
    }

    .u-bar>.pulse {
      top: 0;
      left: 0;
      height: 1.4em;
      background-color: green
    }

    .u-bar>.current {
      top: 0.3em;
      height: 0.8em;
      background-color: red;
    }
  </style>
  <script src="micro.js"></script>
  <script src="ding.js"></script>
  </script>
</head>

<body>
  <div class="container">
    <div class="u-header">
      <a href="/"><img class="icon" src="/i/device.svg" /></a>
      <h1>Elements</h1>
      <a href="/index.htm"><img class="icon" src="/i/home.svg" /></a>
      <a href="/index.htm">Home</a>
      <a href="/ding-ide.htm"><img class="icon" src="/i/ide.svg" /></a>
      <a href="/ding-ide.htm">IDE</a>
    </div>

    <div id="panel" class="row wrap"></div>

    <div id="templates" class="row wrap" style="border:2px solid green;display:none">

      <div class='col' microControl='generic' id='${id}'>
        <div class="card" microBehavior='generic' microID='${id}'>
          <div class="block header">
            <h2><img src="/i/${type}.svg" class='Icon' property='active' />${id}</h2>
              <h4 property='description'></h4>
          </div>
          <div class="block Element">
          </div>
        </div>
      </div>

      <div class='col' microControl='timer' id='${id}'>
        <div class="card" microID='${id}' microBehavior='timer'>
          <div class="block header">
            <h2><img src="/i/${type}.svg" class='Icon' property='active' />${id}</h2>
              <h4 property='description'></h4>
          </div>

          <div class="block">
            <label>wait:</label><span property='waittime'>.</span>
            <label>pulse:</label><span property='pulsetime'>.</span>
          </div>
          <div class="block">
            <div class="u-bar">
              <span class="pulse"></span>
              <span class="current"></span>
            </div>
          </div>
          <hr />
          <div class="block">
            <button property='start' value='1'>Start</button>
            <button property='next' value='1'>Next</button>
            <button property='stop' value='1'>Stop</button>
          </div>
        </div>
      </div>

      <div microControl='dht' class='col' id='${id}'>
        <div class="card" microID='${id}' microBehavior='timer'>
          <div class="block header">
            <h2><img src="/i/${type}.svg" class='Icon' property='active' />${id}</h2>
              <h4 property='description'></h4>
          </div>

          <div class="block">
            <div class='Element'>
              <div class='KV'><span class='Key'>Temp/Hum:</span><span class='Value'><span property='temperature'></span>Â°C
                / <span property='humidity'></span>%</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div microControl='kv' class='KV'><span class='Key'>${key}:</span><span class='Value' property='${key}'></span></div>
    </div>


    <script>
      var eObj = document.getElementById('atype/aname');
      var panelObj = document.getElementById('panel');
      var tempObj = document.getElementById('templates');

      jcl.loadTemplates(tempObj);

      function createElement(path, key, value) {
        var hElem = document.getElementById(path);
        if (!hElem) {

          var p = {
            id: path,
            type: path.split('/')[1]
          };
          var e = jcl.insertTemplate(panelObj, p.type, p);
          if (!e)
            var e = jcl.insertTemplate(panelObj, "generic", p);
        } // if
      } // createElement()


      function setElement(path, key, value) {
        var hText;
        if ((key) && (path.match(/^\/.*\/.*/))) {
          var hElem = document.getElementById(path);

          var elems = hElem.querySelectorAll("[property='" + key + "']");

          if (elems.length == 0) {
            hElem = hElem.querySelectorAll(".Element")[0];
            if (hElem) {
              var p = {
                key: key
              };
              var e = jcl.insertTemplate(hElem, "kv", p);
              elems = hElem.querySelectorAll("[property='" + key + "']");
            }
          } // if

          // update values
          forAllNodeList(elems, function (e) {
            e.textContent = value;
            e.title = value;
          });
        } // if
      } // setElement

      hub.subscribe("/*/*", createElement);
      hub.subscribe("/**/**?**", setElement);

      MicroTQ.startTask(function () {
        loadAsync("env.json", "application/json", function (txt) {
          obj = JSON.parse(txt);
          hub.publishObj(obj);
        })
      });

      // MicroTQ.startTask(function () {
      //   loadAsync("config.json", "application/json", function (txt) {
      //     obj = JSON.parse(txt);
      //     hub.publishObj(obj);
      //   })
      // });

      function updateState() {
        loadAsync("$board", "application/json", function (txt) {
          var obj = JSON.parse(txt);
          hub.publishObj(obj);
        });
      } // updateState()

      window.setInterval(updateState, 3000);
    </script>

  </div>
</body>

</html>
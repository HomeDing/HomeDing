<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Elements</title>
  <link Content-Type="text/css" href="https://www.mathertel.de/iot/iotstyle.css" rel="stylesheet" />

  <style>
    .Element {
      background-color: #e2e4e8;
      padding: 0.1rem;
      min-width: 19.25rem;
      width: 19.25rem;
      height: 11.875rem;
      font-size: 75%;
    }
    
    .Element .Icon {
      width: 3rem;
      height: 3rem;
      float: left;
      margin-right: 0.2rem
    }
    
    .Element .Icon.active {
      background-color: limegreen;
    }
    
    .Element .KV {
      display: block;
      clear: both;
      height: 1.6em;
    }
    
    .Element .Key,
    .Element .Value {
      display: inline-block;
      height: 1.4em;
      white-space: nowrap;
      overflow: hidden;
    }
    
    .Element .Key {
      width: 5.6rem;
      margin-right: 0.1rem;
      text-align: right;
    }
    
    .Element .Value {
      width: 13.3rem;
    }
  </style>
  <script src="micro.js">
  </script>
</head>

<body>
  <div class="container">
    <h1>Elements</h1>

    <div id="panel" class="row wrap"></div>

    <div id="templates" class="row wrap" style="border:2px solid green">
      <div microControl='generic' class='col'>
        <div id='${id}' class='Element' microID='${id}' microBehavior='generic'>
          <img src="${type}/icon.svg" class='Icon' /> <span property='active' style="display:none"></span>
          <div><span>${id}</span></div>
          <div property='description'></div>
        </div>
      </div>

      <div microControl='dht' class='col'>
        <div id='${id}' class='Element' microID='${id}' microBehavior='generic'>
          <img src="${type}/icon.svg" class='Icon' /> <span property='active' style="display:none"></span>
          <div><span>${id}</span></div>
          <div property='description'></div>
          <div class='KV'><span class='Key'>Temp/Hum:</span><span class='Value'><span property='temperature'></span>Â°C / <span property='humidity'></span>%</span>
          </div>
        </div>
      </div>

      <div microControl='display' class='col'>
        <div id='${id}' class='Element' microID='${id}' microBehavior='generic'>
          <img src="${type}/icon.svg" class='Icon' /> <span property='active' style="display:none"></span>
          <div><span>${id}</span></div>
          <div property='description'></div>
          <div class='KV'><span class='Key'>Type:</span><span class='Value' property='type'></span></div>
          <div class='KV'><span class='Key'>X/Y:</span><span class='Value'><span property='x'></span> / <span property='y'></span></span>
          </div>
          <div class='KV'><span class='Key'>Pre-/Postfix:</span><span class='Value'><span property='prefix'></span>&nbsp;/&nbsp;<span property='postfix'></span></span>
          </div>
        </div>
      </div>

      <div microControl='kv' class='KV'><span class='Key'>${key}:</span><span class='Value' property='${key}'></span></div>
    </div>


    <script>
      var eObj = document.getElementById('atype/aname');
      var panelObj = document.getElementById('panel');
      var tempObj = document.getElementById('templates');

      GenericElementBehavior = {
        microID: "",

        init: function() {
          hub.subscribe(this.microid + "?*", this.newData.bind(this));
        }, // init

        newData: function(path, key, value) {
            if (key == 'active') {
              var e = this.querySelector("img[class='Icon']");
              if (e) {
                if (value)
                  e.classList.add('active')
                else
                  e.classList.remove('active')
              } // if
            }
          } // newData()
      }; // GenericElementBehavior

      jcl.loadTemplates(tempObj, true);
      jcl.registerBehaviour("generic", GenericElementBehavior);

      function createElement(path, key, value) {
        var hElem = document.getElementById(path);
        if (!hElem) {

          var p = {
            id: path,
            type: path.split('/')[1]
          };
          var e = jcl.insertTemplate(panelObj, p.type, p);
          if (!e)
            var e = jcl.insertTemplate(panelObj, "generic", p);
        } // if
      } // createElement()


      function setElement(path, key, value) {
        var hText;
        // debugger;
        if ((key) && (path.match(/^\/.*\/.*/))) {
          var hElem = document.getElementById(path);

          var elems = hElem.querySelectorAll("[property='" + key + "']");

          if (elems.length == 0) {
            // create html to display this property.
            // <div><span class='Key'>Label:</span><span class='Value' property='key'></span></div>
            // hText = Generic.kv.replace(/\$\{key\}/g, key); // .replace(/[.*+?^${}()|[\]\\]/g, "\\$&");

            var p = {
              key: key
            };
            var e = jcl.insertTemplate(hElem, "kv", p);
            elems = hElem.querySelectorAll("[property='" + key + "']");
          } // if

          // update values
          forAllNodeList(elems, function(e) {
            e.textContent = value;
            e.title = value;
          });
        } // if
      } // setElement

      hub.subscribe("/*/*", createElement);
      hub.subscribe("/**/**?**", setElement);

      loadAsync("config.json", "application/json", function(txt) {
        obj = JSON.parse(txt);
        hub.publishObj(obj);
      });

      function updateState() {
        loadAsync("$board", "application/json", function(txt) {
          var obj = JSON.parse(txt);

          hub.publishObj(obj);
        });
      } // updateState()

      window.setInterval(updateState, 8000);
    </script>

  </div>
</body>

</html>
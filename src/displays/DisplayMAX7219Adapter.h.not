/**
 * @file DisplayMAX7219Adapter.h
 *
 * @brief DisplayAdapter implementation for the HomeDing library
 * adapting LED Matrix displays using the MAX7219 chip.
 * 
 * It uses the GFX GFXcanvas1 to create a in-memory copy of the display
 * that will be sent to the MAX7219 chips at once when calling flush().
 *
 * @author Matthias Hertel, https://www.mathertel.de
 *
 * @Copyright Copyright (c) by Matthias Hertel, https://www.mathertel.de.
 * -----
 * * 25.07.2018 created by Matthias Hertel
 * * 07.12.2020 no write text beyond textline end.
 */

#pragma once

#include <displays/DisplayAdapterGFX.h>

#include <SPI.h>

#define REG_DECODEMODE 0x09
#define REG_INTENSITY 0x0A
#define REG_SCANLIMIT 0x0B
#define REG_SHUTDOWN 0x0C
#define REG_DISPLAYTEST 0x0F

// use TRACE for compiling with detailed TRACE output.
#define TRACE(...)  // LOGGER_JUSTINFO(__VA_ARGS__)

class DisplayMAX7219Adapter : public DisplayAdapterGFX {
public:
  ~DisplayMAX7219Adapter() = default;

  bool start() override {
    _csPin = displayConfig.csPin;

    // adjust false height and width (must be *8)
    _hPanels = (displayConfig.height + 7) / 8;
    _wPanels = (displayConfig.width + 7) / 8;

    int bytes = _hPanels * 8 * _wPanels * 8;

    if (bytes == 0 || bytes > 10 * 1024) {
      LOGGER_ERR("display dimensions ?");
      return (false);
    }
    display = new (std::nothrow) GFXcanvas1(_wPanels * 8, _hPanels * 8);

    if (!display) {
      LOGGER_ERR("not found");
      return (false);

    } else {
      gfxDisplay = (Adafruit_GFX *)display;
      DisplayAdapterGFX::start();
      backColor565 = 0x0000;
      drawColor565 = 0xFFFF;

      pinMode(_csPin, OUTPUT);
      digitalWrite(_csPin, HIGH);

      SPI.begin();
      _writeAll(REG_DISPLAYTEST, 0);   // no test mode
      _writeAll(REG_SCANLIMIT, 0x07);  // all digits
      _writeAll(REG_DECODEMODE, 0);    // no decode
      _writeAll(REG_SHUTDOWN, 1);      // enable
      setBrightness(displayConfig.brightness);
      display->fillScreen(backColor565);
      flush();
    }  // if
    return (true);
  };  // start()


  /**
   * Control the brightness of the whole display.
   * @param brightness = 0...100
   */
  virtual void setBrightness(uint8_t brightness) override {
    TRACE("brightness(%d)", brightness);

    int b = (brightness * 16) / 100;

    b = constrain(b, 0, 16);

    if (b == 0) {
      _writeAll(REG_SHUTDOWN, 0);
    } else {
      _writeAll(REG_SHUTDOWN, 1);
      _writeAll(REG_INTENSITY, b - 1);
    }
  }  // setBrightness()


  /**
   * @brief Set the drawing and font color.
   * This is not in use as drawing is always LED-ON.
   * @param col unused.
   */
  virtual void setColor(UNUSED uint32_t col) override{
    // LOGGER_JUSTINFO("no-setColor");
  };


  /**
   * @brief Get the drawing and font color.
   * @return color always white.
   */
  virtual uint32_t getColor() override {
    return (0x00FFFFFF);  // white
  };


  // MAX7219 modules may be arranged like this:
  //
  // [00][01][02][03] <= data
  //
  // [00][01][02][03][04][05][06][07] <= data
  // 
  // not yet working:
  // [00][01][02][03][04][05][06][07]
  // [08][09][10][11][12][13][14][15] <= data

  /**
   * @brief send all pixels in the buffer to the attached display.
   */
  virtual void flush() override {
    // LOGGER_JUSTINFO("flush()");

    int lineOffset = _wPanels;  ///< offset in buffer to 1 line down.
    uint8_t *buffer = display->getBuffer();

    // // print buffer on Serial log
    // uint8_t *p = buffer;
    // for (int l = 0; l < displayConfig.height; l++) {
    //   uint8_t b = 0;
    //   for (int x = 0; x < displayConfig.width; x++) {
    //     if ((x % 8) == 0) {
    //       b = *p++;
    //     }
    //     if (b & 0x80) {
    //       Serial.print('#');
    //     } else {
    //       Serial.print('.');
    //     }
    //     b = b << 1;
    //   }
    //   Serial.println();
    // }
    // Serial.println();

    // shift to display !
    SPI.beginTransaction(SPISettings(8000000, MSBFIRST, SPI_MODE0));

    // 8 SPI transfers for 8 lines in the modules
    for (int l = 0; l < 8; l++) {

      // transfer all data from one horizontal line into daisychained buffers.
      digitalWrite(_csPin, LOW);
      for (int x = 0; x < _wPanels; x++) {
        uint8_t d = buffer[x + l * lineOffset];
        SPI.transfer(l + 1);
        SPI.transfer(d);
      }  // for
      // save data into display.
      digitalWrite(_csPin, HIGH);
    }  // for
    SPI.endTransaction();
  };

private:
  /**
   * @brief Reference to the used library object
   */
  GFXcanvas1 *display = nullptr;

  uint8_t _csPin;
  uint8_t _hPanels;
  uint8_t _wPanels;

  /**
   * @brief Write data to all modules of the display
   * @param address
   * @param data
   */
  void _writeAll(byte address, byte data) {
    int modules = _wPanels * _hPanels;
    digitalWrite(_csPin, LOW);
    while (modules) {
      SPI.transfer(address);
      SPI.transfer(data);
      modules--;
    }
    digitalWrite(_csPin, HIGH);
  }
};

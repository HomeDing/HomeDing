<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Element Panel</title>
  <link href="/iotstyle.css" rel="stylesheet" type="text/css">

  <script src="es6-promise.auto.js"></script>
  <!-- <script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.js"></script> -->
  <script src="polyfill.js"></script>
  <script src="micro.js"></script>
  <script src="panel.js"></script>

  <style>
    #panel {
      fill:none;
      background-color: silver;
      background-image: linear-gradient(to top, rgba(0,0,0,.2) 1px, transparent 1px),
  linear-gradient(to left, rgba(0,0,0,.2) 1px, transparent 1px);
  background-size: 72px 72px;
    }

    #panel #templates {
      display: none;
    }

    #links>line {
      stroke: #080808;
      stroke-width: 2;
      stroke-linecap: round;
    }

    .node rect {
      fill: #d4dced;
      stroke-width: 0;
    }

    .node {
      font-size: 12px;
      font-family: sans-serif;
      fill: #000000;
      fill-opacity: 1;
      stroke: none;
      font-style: normal;
      font-weight: normal;
    }

    .node circle {
      fill: #505050;
      stroke-width: 0;
    }

    .node text {
      font-size: 10px;
    }

    #Grid {
      fill: #e0e0e0;
      stroke: none
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="u-header">
      <a href="/" title="Startpage" ><img class="icon" src="/i/device.svg" /></a>
      <h1>Panel</h1>
    </div>
    <div class="u-navbar">
      <button onclick="window.location='/'">Home</button>
      <button onclick="window.location='/ding-info.htm'">Board</button>
      <button onclick="window.location='/ding-ide.htm'">IDE</button>
      <button onclick="window.location='/ding-log.htm'">Log</button>
  </div>

    <svg id="panel">
      <rect height="100%" width="100%"></rect>
        <g id="templates">
          <g dragabble="true" class="node">
            <rect width="64" height="64" rx="8"></rect>
            <image class="icon" x="16" y="4" width="32" height="32" xlink:href="/i/device.svg" />
            <text class="id" x="32" y="56" text-anchor="middle">subtitle</text>
            <circle pin="in" cx="8" cy="36" r="5"></circle>
            <circle pin="out" cx="56" cy="36" r="5"></circle>
          </g>
        </g>
        <g id="viewport">
          <g id="nodes"></g>
          <g id="links"></g>
        </g>
      </svg>

    <script>
      var PANEL_GRIDSIZE = 72; // px
      var PANEL_WIDTH = 16;
      var PANEL_HEIGHT = 12;

      var params = getHashParams({
        sys: false
      });
      window.addEventListener("hashchange", function () {
        window.location.reload();
      });

      var elementDef, envDef, configDef;

      var panelObj = document.getElementById('panel');
      var viewObj = document.getElementById('viewport');

      panelObj.style.width = PANEL_GRIDSIZE * PANEL_WIDTH + "px";
      panelObj.style.height = PANEL_GRIDSIZE * PANEL_HEIGHT + "px";


      var DragObj = null;
      var DragOffset = null;

      var nodes = {};
      var edges = [];

      // create all edges from the actions of a node.
      function createEdges(srcPath, actions) {
        actions.split(',').forEach(function (a) {
          var tarPath = a.split('?')[0];
          edges.push({
            src: srcPath,
            srcPin: "out",
            tar: tarPath,
            tarPin: "in"
          });
        });
      } // createEdges()

      /*
      HomeDing config data model ->
        create nodes = {id, xPos, yPos, onXXX, obj }
        create edges = {src, srcPin, tar, tarPin, obj}
      */

      // create all nodes from the HomeDing config file
      function createNodes(json) {
        jsonParse(json, function (path, key, val) {
          if ((path.length > 1) && (path[0] === '/'))
            path = path.substr(1);
          if (path.split('/').length == 2) {
            var t = path.split('/')[0].toLowerCase();

            if (toBool(params.sys) || (!elementDef[t]) || (toBool(elementDef[t].sys) == false)) {
              var n = nodes[path];
              if (!n) {
                n = nodes[path] = {
                  id: path
                }; // create a new node
                n.icon = t;
              } // if
              if (key) {
                n[key] = val;
                if (key.substr(0, 2) == 'on') {
                  createEdges(path, val);
                }
              } // if
            } // if
          } // if
        });
      } // createNodes()


      // initial placement of all nodes
      function placeNodes() {
        var px = 0;
        var py = 1;
        // remove edge going into the nirvana
        edges = edges.filter(function (l) {
          return (nodes[l.src] && nodes[l.tar]);
        });

        // find nodes without edges:
        p = 0;
        for (n in nodes) {
          nodes[n]._out = nodes[n]._in = 0;
        }
        edges.forEach(function (l) {
          nodes[l.src]._out++;
          nodes[l.tar]._in++;
        });
        for (n in nodes) {
          if (nodes[n]._out == 0 && nodes[n]._in == 0) {
            // nodes without edges in line 1:
            nodes[n].xPos = px++;
            nodes[n].yPos = 0;
          } else {
            // nodes with edges vertically;
            nodes[n].xPos = 5 + nodes[n]._in - nodes[n]._out;
            nodes[n].yPos = py++;
          }
        };
      } // placeNodes()

      function posInUse(x, y) {
        var found = null;
        Object.values(nodes).forEach(function (o) {
          if ((!found) && (o.xPos == x) && (o.yPos == y))
            found = o;
        });
        return (found);
      };

      function lineInUse(y) {
        var found = null;
        Object.values(nodes).forEach(function (o) {
          if ((!found) && (o.yPos == y))
            found = o;
        });
        return (found);
      };


      function yForce(nodeId) {
        var dist = 0;
        var num = 0;
        var yPos = nodes[nodeId].yPos;
        edges.forEach(function (l) {
          if (l.src == nodeId) {
            dist += nodes[l.tar].yPos - yPos;
            num++;
          }
          if (l.tar == nodeId) {
            dist += nodes[l.src].yPos - yPos;
            num++;
          }
        });
        return (dist / num);
      };


      function moveNodes() {
        var moved = false;
        for (var nodeId in nodes) {
          var node = nodes[nodeId];
          f = yForce(nodeId);
          if ((f < -0.5) && (!posInUse(node.xPos, node.yPos - 1))) {
            node.yPos--;
            moved = true;
          }
        } // for

        for (var n = 0; n < 12; n++) {
          if (!lineInUse(n)) {
            for (var nodeId in nodes) {
              var e = nodes[nodeId];
              if (e.yPos === n + 1) {
                e.yPos--;
                moved = true;
              }
            } // for
          }
        }
        return (moved);
      } // moveNodes()


      // create / update svg objects for all nodes
      function updateNodes() {
        for (var nodeId in nodes) {
          var t = nodeId.split('/')[0];
          var e = nodes[nodeId];
          var ed = elementDef[t];

          var obj = e.obj;
          if (!obj) {
            // create a new svg object for node
            var nodesObj = document.getElementById('nodes');
            obj = e.obj = document.querySelector('#templates .node').cloneNode(true);
            nodesObj.appendChild(obj);
            // disable outgoing pin ?
            if (ed) {
              if ((ed.events) && (ed.events.length == 0)) {
                var pin = obj.querySelector('[pin="in"]');
                if (pin) pin.style.display = "none";
              }
              if ((ed.actions) && (ed.actions.length == 0)) {
                var pin = obj.querySelector('[pin="out"]');
                if (pin) pin.style.display = "none";
              }
            }

          }

          // update svg object by node properties
          if (e.icon)
            obj.querySelector('.icon').setAttribute("xlink:href", "/i/" + e.icon + ".svg");
          obj.querySelector('.id').firstChild.textContent = nodeId;

          moveSVGGroup(obj, e.xPos * PANEL_GRIDSIZE+4, e.yPos * PANEL_GRIDSIZE+4);
        } // for
      } // updateNodes()


      // create / update all svg objects edges to current position of nodes
      function updateEdges() {
        var aPos;
        var linksObj = document.getElementById('links');

        for (var n = 0; n < edges.length; n++) {
          var f = edges[n];
          var sObj = nodes[f.src];
          var tObj = nodes[f.tar];

          if (sObj && tObj) {
            var obj = f.obj;
            if (!obj) {
              obj = f.obj = linksObj.ownerDocument.createElementNS("http://www.w3.org/2000/svg", 'line');
              linksObj.appendChild(obj);
            } // if
            aPos = _pinPos(sObj, f.srcPin);
            obj.setAttribute("x1", aPos.x);
            obj.setAttribute("y1", aPos.y);

            aPos = _pinPos(tObj, f.tarPin);
            obj.setAttribute("x2", aPos.x);
            obj.setAttribute("y2", aPos.y);
          } // for
        }
      } // updateEdges()

      // get configuration data
      var p1 = fetch('/env.json')
        .then(function (result) {
          return (result.json())
        }).then(function (json) {
          envDef = json;
          return (fetch('/config.json'));
        }).then(function (result) {
          return (result.json())
        }).then(function (json) {
          configDef = json;
        });

      // get element meta data
      var p2 = fetch('/elements.json')
        .then(function (result) {
          return (result.json())
        }).then(function (json) {
          elementDef = json;
        });

      // start when all data is available
      Promise.all([p1, p2]).then(function () {
        console.log("all done.");
        createNodes(envDef);
        createNodes(configDef);
        placeNodes();
        while (moveNodes()) {};
        updateNodes();
        updateEdges();
      });

      panelObj.addEventListener("mousedown", function (evt) {
        if (!DragObj) {
          var o = evt.target;
          // check for a draggable object.
          while (o && o.attributes && (!o.attributes["dragabble"]))
            o = o.parentNode;
          if (o && o.attributes && (o.attributes["dragabble"]))
            DragObj = o;
        }

        if (DragObj) {
          // calculate Drag Offset = mouse position - drag object position
          DragOffset = getSVGPos(panelObj, evt);
          var cc = DragObj.getCTM();
          DragOffset.x -= cc.e;
          DragOffset.y -= cc.f;
        }
      }); // mouseDown


      panelObj.addEventListener("mousemove", function (evt) {
        if (DragObj) {
          var DragPos = getSVGPos(panelObj, evt);
          moveSVGGroup(DragObj, DragPos.x - DragOffset.x, DragPos.y - DragOffset.y);
          updateEdges();
        } // if
      }); // mousemove


      panelObj.addEventListener("mouseup", function (evt) {
        if (DragObj) {
          var DragPos = getSVGPos(panelObj, evt);

          for (var n in nodes) {
            if (nodes[n].obj == DragObj) {
              nodes[n].xPos = Math.floor(DragPos.x / PANEL_GRIDSIZE);
              nodes[n].yPos = Math.floor(DragPos.y / PANEL_GRIDSIZE);
              break;
            }
          } // for
          updateNodes();
          updateEdges();

          DragObj = null;
        } // if
      }); // mouseup
    </script>


  </div>
</body>

</html>
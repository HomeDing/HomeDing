<!doctype html>
<html lang="en">

<head>
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />

  <title>Board</title>

  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">
  <meta name="application-name" content="Ding" />
  <meta name="msapplication-config" content="/browserconfig.xml" />
  <meta name="msapplication-TileColor" content="#2b5797" />
  <meta name="msapplication-TileImage" content="/favicon144.png" />
  <link rel="apple-touch-icon" sizes="180x180" href="/favicon180.png" />
  <meta name="mobile-web-app-capable" content="yes" />
  <link rel="manifest" href="/manifest.json" />
  <meta name="theme-color" content="#ffffff" />
  <link rel="icon" type="image/png" href="/favicon48.png" sizes="48x48">

  <link Content-Type="text/css" href="/iotstyle.css" rel="stylesheet" />

  <style>
    .activeState {
      position: absolute;
      top: 0.5rem;
      right: 0.5rem;
      height: 1.4rem;
      width: 1.4rem;
      background-image: url(/i/stop.svg);
      background-size: 1.4rem;
    }

    .activeState.active {
      background-image: url(/i/start.svg);
      background-size: 1.4rem;
    }

    span.setconfig {
      position: absolute;
      top: 0.4rem;
      right: 2.2rem;
      height: 1.4rem;
      width: 1.4rem;
      background-image: url(/i/config.svg);
      background-size: 1.4rem;
    }

    #modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }

    #modalBack {
      position: absolute;
      width: 100%;
      height: 100%;
      background-color: silver;
      opacity: 0.75;
    }

    #modalContainer {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translateX(-50%) translateY(-50%);
      padding: 0.5em;
    }

    /* signature dialog */
    #modalContainer::before,
    #modalContainer::after {
      content: "";
      position: absolute;
      background-color: red;
      z-index: -1;
      width: 40px;
      height: 40px;
    }

    #modalContainer::before {
      top: 0;
      right: 0;
    }

    #modalContainer::after {
      bottom: 0;
      left: 0;
    }

    .closedlg {
      position: absolute;
      top: 0.4rem;
      right: 0.4rem;
      height: 1.8rem;
      width: 1.8rem;
      font-size: 1.6rem;
      background-color: red;
      text-align: center;
    }

    img,
    #panel {
      user-select: none;
      -ms-user-select: none;
    }

    .hueband {
      background: linear-gradient(to right, #ff0000 0%, #ffff00 17%, #00ff00 33%, #00ffff 50%, #0000ff 67%, #ff00ff 83%, #ff0000 100%);
    }
  </style>
  <script src="/polyfill.js"></script>
  <script src="/es6-promise.auto.js"></script>
  <script src="/micro.js"></script>
</head>

<body>
  <div class="container-fluid">
    <div class="u-header">
      <a href="/" title="Start-Page"><img class="icon" src="/i/device.svg" /></a>
      <h1>Config</h1>
    </div>
    <div class="u-navbar">
      <a class="button" href="/">Home</a>
      <a class="button" href="/board.htm">Board</a>
      <a class="button" href="/microide.htm">IDE</a>
      <a class="button" href="/log.htm">Log</a>
      <button id="sysButton" class="func">sys</button>
      <button id="addButton" class="func">+</button>
    </div>

    <div id="panel" class="row wrap"></div>

    <div id="u-templates" style="display:none">
      <div class="col card" u-control="generic" u-is="generic" microID="${id}">
        <div class="block header">
          <img data-src="/i/${type}.svg" class="icon" />
          <h3>${id}</h3>
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="setconfig"></span>
        </div>
        <div class="block">
          <div class="form-group"><label>Value:</label><span u-text="value"></span></div>
        </div>
      </div>

      <div class="col card" u-control="schedule" id="${id}" u-is="generic" microID="${id}">
        <div class="block header">
          <img src="/i/schedule.svg" class="icon" />
          <h3>${id}</h3>
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="setconfig"></span>
        </div>
        <div class="block">
          <div class="form-group">
            <label>Start:</label>
            <span u-text="ontime"></span>
          </div>
          <div class="form-group">
            <label>End:</label>
            <span u-text="offtime"></span>
          </div>
          <span class="u-bool ux-value" u-active="value"></span>
        </div>
      </div>

      <div class="col card" u-control="dstime" id="${id}" u-is="dstime" microID="${id}">
        <div class="block header">
          <img src="/i/time.svg" class="icon" />
          <h3>${id}</h3>
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="setconfig"></span>
        </div>
        <div class="block">
          <div class="form-group">
            <label>ReadTime:</label>
            <input u-value="readtime" type="time" step="1" />
          </div>
          <div class="form-group">
            <label>Now:</label>
            <span u-text="now"></span>
          </div>
          <div class="form-group">
            <label>set Time:</label>
            <span class="now"></span>
          </div>
          <button class=" " style="float:right">set</button>
        </div>
      </div>

      <div class="col card" u-control="switch" id="${id}" u-is="switch" microID="${id}">
        <div class="block header">
          <img src="/i/switch.svg" class="icon" />
          <h3>${id}</h3>
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="setconfig"></span>
        </div>
        <div class="block">
          <span class="u-bool ux-value" u-active="value"></span>
          <div class="u-slider u-switch" u-active="value">
            <label value="0">off</label>
            <div class="box">
              <div class="handle"></div>
            </div>
            <label value="1">on</label>
          </div>
        </div>
      </div>

      <div class="col card" u-control="value" u-is="slider" microID="${id}">
        <div class="block header">
          <img src="/i/value.svg" class="icon" />
          <h3>${id}</h3>
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="setconfig"></span>
        </div>
        <div class="block">
          <div class="form-group"><label>value:</label><span u-text="value"></span></div>
          <div class="u-slider">
            <label class="down"><img src="/i/minus.svg"></label>
            <div class="box" style="width:240px">
              <div class="handle"></div>
            </div>
            <label class="up"><img src="/i/plus.svg"></label>
          </div>
        </div>
      </div>

      <div class="col card" u-control="and" id="${id}" u-is="generic" microID="${id}">
        <div class="block header">
          <img src="/i/and.svg" class="icon" />
          <h3>${id}</h3>
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="setconfig"></span>
        </div>
        <div class="block">
          <span class="u-bool ux-value" u-active="value"></span>
          <div class="form-group"><label>value:</label><span u-text="value"></span></div>
        </div>
      </div>

      <div class="col card" u-control="neo" id="${id}" u-is="neo" microID="${id}">
        <div class="block header">
          <img src="/i/neo.svg" class="icon" />
          <h3>${id}</h3>
          <h4 u-text="description"></h4>
          <span class="activeState" u-active="active"></span>
          <span class="setconfig"></span>
        </div>
        <div class="block">
          <div class="form-group"><label>value:</label><span u-text="value"></span><span class="color"
              style="width:6rem;"></span></div>
          <div class="hueband" style="height:1.4rem;width:100%;margin-bottom: 0.4rem;"></div>
          <button u-action="mode" value="flow">flow</button>
          <button u-action="mode" value="wheel">wheel</button>
          <button u-action="mode" value="pulse">pulse</button>
        </div>
      </div>

      <div class="col card" u-control="webbutton" id="${id}" u-is="generic" microID="${id}">
        <div class="block">
          <button u-action="${onclick}" u-text="description"></button>
        </div>
      </div>
    </div>
  </div>

  <div id="modal" class="hidden">
    <div id="modalBack" onclick="micro.closeModal()"></div>
    <div id="modalContainer" style="min-width:20px;min-height:20px">Hello, this is modal</div>
  </div>

  <script>
    var panelObj = document.getElementById('panel');
    var addObj = document.getElementById('addButton');
    var sysObj = document.getElementById('sysButton');
    var updateTimer;
    var elementDef;
    var params = getHashParams({
      sys: false
    });
    window.addEventListener('hashchange', function () {
      window.location.reload();
    });

    sysObj.addEventListener('click', function (evt) {
      params.sys = !toBool(params.sys);
      window.location.hash = 'sys=' + params.sys;
    });

    addObj.addEventListener('click', function (evt) {
      micro.openModal('newelementdlg');
    });

    function createElement(path, key, value) {
      if (path) {
        path = path.toLowerCase();
        var hElem = document.querySelector("[microID='" + path + "']");
        if (!hElem) {
          var t = path.split('/')[1];
          var p = {
            id: path,
            type: t
          };

          if (toBool(params.sys) || !elementDef[t] || toBool(elementDef[t].sys) == false) {
            var e = micro.insertTemplate(panelObj, t, p);
            if (!e) { micro.insertTemplate(panelObj, 'generic', p); }
          } // if
        } // if
      } // if
    } // createElement()
    hub.subscribe('/*/*', createElement);

    function updateAsap(ev) {
      if (updateTimer)
        window.clearTimeout(updateTimer);
      updateTimer = null;
      updateTimer = window.setTimeout(updateState, 20);
    }

    function updateState(ev) {
      if (updateTimer)
        window.clearTimeout(updateTimer);
      updateTimer = null;

      fetch('/$board')
        .then(function (result) {
          return result.json();
        })
        .then(function (json) {
          hub.publishObj(json);
        })
        .then(function (json) {
          updateTimer = window.setTimeout(updateState, 4000);
        });
    } // updateState()

    function init() {
      // load templates from other file.
      var p0 = Promise.all([micro.loadFile('/board-templates.htm'), micro.loadFile('/board-new.htm')]);

      // element definitions -> env.json -> config.json
      var p1 = fetch('/elements.json')
        .then(function (result) {
          return result.json();
        })
        .then(function (json) {
          elementDef = json;

          return fetch('/env.json');
        })
        .then(function (result) {
          return result.json();
        })
        .then(function (json) {
          hub.publishObj(json);

          return fetch('/config.json');
        })
        .then(function (result) {
          return result.json();
        })
        .then(function (json) {
          hub.write('config', JSON.stringify(json));
          hub.publishObj(json);
        });

      Promise.all([p0, p1]).then(function () {
        updateState();
      });
    } // init()

    window.addEventListener('load', init);

    window.addEventListener('error', function (err) {
      alert(JSON.stringify(err, null, 1));
    })


  </script>
</body>

</html>